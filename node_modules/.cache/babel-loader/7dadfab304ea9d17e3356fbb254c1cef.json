{"ast":null,"code":"var _jsxFileName = \"/home/marina/VxTel/src/pages/Dashboard/index.jsx\";\nimport { Component } from 'react';\nimport Header from '../../components/Header';\nimport api from '../../services/api';\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\nimport { FoodsContainer } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  //Interface properties\n  constructor(props) {\n    super(props);\n\n    this.handleAddFood = async food => {\n      //receives added food object as a parameter\n      //the array os foods is in it's state \n      const {\n        foods\n      } = this.state; //try to call the api with post method to update\n      //information. Say the address of the server object,\n      //and add parameter related to that method (post what?)\n\n      try {\n        const response = await api.post('/foods', { ...food,\n          available: true\n        });\n        this.setState({\n          foods: [...foods, response.data]\n        }); //replace the state info with it's info copied + data posted\n      } catch (err) {\n        //catch and display on console in case of error in the server\n        console.log(err);\n      }\n    };\n\n    this.handleUpdateFood = async food => {\n      //this state has all foods and the one which is being edited\n      const {\n        foods,\n        editingFood\n      } = this.state; //try to take info from server using method put, specifying\n      //which object is being changed by .id property\n      //parameter has a copy of editing food object and the object \n      //chosen to be updated. \n      //first I update this information...\n\n      try {\n        const foodUpdated = await api.put(`/foods/${editingFood.id}`, { ...editingFood,\n          ...food\n        }); //pass through all foods inside the array and check if this data \n        //is equal to the one which was updated.\n        //Not equal: it returns the same data\n        //equal: returns updated data\n        //...then I pass through all the elements and return themselves\n        //or the updated one in case it has been updated\n\n        const foodsUpdated = foods.map(f => f.id !== foodUpdated.data.id ? f : foodUpdated.data); //take the updated information stored before and then update this information\n\n        this.setState({\n          foods: foodsUpdated\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleDeleteFood = async id => {\n      //this state has all foods\n      const {\n        foods\n      } = this.state; //its not changing any information in the server, so I dont need\n      //try and catch\n      //I use the method delete indicating the id, It will delete\n      //this item from the api\n\n      await api.delete(`/foods/${id}`); //store the foods array based on whats different from the indicated id\n\n      const foodsFiltered = foods.filter(food => food.id !== id); //updated all foods information in the state with the filtered info. \n\n      this.setState({\n        foods: foodsFiltered\n      });\n    };\n\n    this.toggleModal = () => {\n      const {\n        modalOpen\n      } = this.state;\n      this.setState({\n        modalOpen: !modalOpen\n      });\n    };\n\n    this.toggleEditModal = () => {\n      const {\n        editModalOpen\n      } = this.state;\n      this.setState({\n        editModalOpen: !editModalOpen\n      });\n    };\n\n    this.handleEditFood = food => {\n      this.setState({\n        editingFood: food,\n        editModalOpen: true\n      });\n    };\n\n    this.state = {\n      foods: [],\n      editingFood: {},\n      modalOpen: false,\n      editModalOpen: false\n    };\n  } //get all data from the api and use useState and useEffect\n\n\n  async componentDidMount() {\n    const response = await api.get('/foods');\n    this.setState({\n      foods: response.data\n    });\n  } //addFood useState\n\n\n  //rendering the elements\n  render() {\n    //destructure all the states info in this.state\n    const {\n      modalOpen,\n      editModalOpen,\n      editingFood,\n      foods\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        openModal: this.toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalAddFood, {\n        isOpen: modalOpen,\n        setIsOpen: this.toggleModal,\n        handleAddFood: this.handleAddFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditFood, {\n        isOpen: editModalOpen,\n        setIsOpen: this.toggleEditModal,\n        editingFood: editingFood,\n        handleUpdateFood: this.handleUpdateFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FoodsContainer, {\n        \"data-testid\": \"foods-list\",\n        children: foods && foods.map(food => /*#__PURE__*/_jsxDEV(Food, {\n          food: food,\n          handleDelete: this.handleDeleteFood,\n          handleEditFood: this.handleEditFood\n        }, food.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\n;\nexport default Dashboard;","map":{"version":3,"sources":["/home/marina/VxTel/src/pages/Dashboard/index.jsx"],"names":["Component","Header","api","Food","ModalAddFood","ModalEditFood","FoodsContainer","Dashboard","constructor","props","handleAddFood","food","foods","state","response","post","available","setState","data","err","console","log","handleUpdateFood","editingFood","foodUpdated","put","id","foodsUpdated","map","f","handleDeleteFood","delete","foodsFiltered","filter","toggleModal","modalOpen","toggleEditModal","editModalOpen","handleEditFood","componentDidMount","get","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\n\nimport Header from '../../components/Header';\nimport api from '../../services/api';\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\nimport { FoodsContainer } from './styles';\n\nclass Dashboard extends Component {\n\n  //Interface properties\n  constructor(props) {\n    super(props);\n    this.state = {\n      foods: [],\n      editingFood: {},\n      modalOpen: false,\n      editModalOpen: false,\n    }\n  }\n\n  //get all data from the api and use useState and useEffect\n  async componentDidMount() {\n    const response = await api.get('/foods');\n\n    this.setState({ foods: response.data });\n  }\n\n  //addFood useState\n  handleAddFood = async food => {\n\n    //receives added food object as a parameter\n    //the array os foods is in it's state \n    const { foods } = this.state;\n    \n    //try to call the api with post method to update\n    //information. Say the address of the server object,\n    //and add parameter related to that method (post what?)\n    try {\n      const response = await api.post('/foods', {\n        ...food,\n        available: true,\n      });\n      this.setState({ foods: [...foods, response.data] });\n      //replace the state info with it's info copied + data posted\n    } catch (err) { //catch and display on console in case of error in the server\n      console.log(err);\n    }\n  }\n\n  //updateFood useState\n  handleUpdateFood = async food => {\n    //this state has all foods and the one which is being edited\n    const { foods, editingFood } = this.state;\n\n    //try to take info from server using method put, specifying\n    //which object is being changed by .id property\n    //parameter has a copy of editing food object and the object \n    //chosen to be updated. \n    //first I update this information...\n\n    try {\n      const foodUpdated = await api.put(\n        `/foods/${editingFood.id}`,\n        { ...editingFood, ...food },\n      );\n      \n      //pass through all foods inside the array and check if this data \n      //is equal to the one which was updated.\n      //Not equal: it returns the same data\n      //equal: returns updated data\n      //...then I pass through all the elements and return themselves\n      //or the updated one in case it has been updated\n      const foodsUpdated = foods.map(f =>\n        f.id !== foodUpdated.data.id ? f : foodUpdated.data,\n      );\n      \n      //take the updated information stored before and then update this information\n      this.setState({ foods: foodsUpdated });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //delete food (I just need the id, not the whole info)\n  handleDeleteFood = async id => {\n    //this state has all foods\n    const { foods } = this.state;\n\n    //its not changing any information in the server, so I dont need\n    //try and catch\n    //I use the method delete indicating the id, It will delete\n    //this item from the api\n    await api.delete(`/foods/${id}`);\n    \n    //store the foods array based on whats different from the indicated id\n    const foodsFiltered = foods.filter(food => food.id !== id);\n\n    //updated all foods information in the state with the filtered info. \n    this.setState({ foods: foodsFiltered });\n  }\n\n  //open and close add food modal\n  toggleModal = () => {\n    const { modalOpen } = this.state;\n\n    this.setState({ modalOpen: !modalOpen });\n  }\n\n  //open and close edit modal \n  toggleEditModal = () => {\n    const { editModalOpen } = this.state;\n\n    this.setState({ editModalOpen: !editModalOpen });\n  }\n\n  //add data to editing food and set the information that this modal \n  //is open\n  handleEditFood = food => {\n    this.setState({ editingFood: food, editModalOpen: true });\n  }\n  \n  //rendering the elements\n  render() {\n    //destructure all the states info in this.state\n    const { modalOpen, editModalOpen, editingFood, foods } = this.state;\n\n    return (\n      <>\n        <Header openModal={this.toggleModal} />\n        <ModalAddFood\n          isOpen={modalOpen}\n          setIsOpen={this.toggleModal}\n          handleAddFood={this.handleAddFood}\n        />\n        <ModalEditFood\n          isOpen={editModalOpen}\n          setIsOpen={this.toggleEditModal}\n          editingFood={editingFood}\n          handleUpdateFood={this.handleUpdateFood}\n        />\n\n        <FoodsContainer data-testid=\"foods-list\">\n          {foods &&\n            foods.map(food => (\n              <Food\n                key={food.id}\n                food={food}\n                handleDelete={this.handleDeleteFood}\n                handleEditFood={this.handleEditFood}\n              />\n            ))}\n        </FoodsContainer>\n      </>\n    );\n  }\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}