{"ast":null,"code":"var _jsxFileName = \"/home/marina/ignite/Challenge02_Chapter02/src/pages/Dashboard/index.jsx\";\nimport { Component } from 'react';\nimport Header from '../../components/Header';\nimport api from '../../services/api';\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\nimport { FoodsContainer } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddFood = async food => {\n      const {\n        foods\n      } = this.state;\n\n      try {\n        const response = await api.post('/foods', { ...food,\n          available: true\n        });\n        this.setState({\n          foods: [...foods, response.data]\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleUpdateFood = async food => {\n      const {\n        foods,\n        editingFood\n      } = this.state;\n\n      try {\n        const foodUpdated = await api.put(`/foods/${editingFood.id}`, { ...editingFood,\n          ...food\n        });\n        const foodsUpdated = foods.map(f => f.id !== foodUpdated.data.id ? f : foodUpdated.data);\n        this.setState({\n          foods: foodsUpdated\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleDeleteFood = async id => {\n      const {\n        foods\n      } = this.state;\n      await api.delete(`/foods/${id}`);\n      const foodsFiltered = foods.filter(food => food.id !== id);\n      this.setState({\n        foods: foodsFiltered\n      });\n    };\n\n    this.toggleModal = () => {\n      const {\n        modalOpen\n      } = this.state;\n      this.setState({\n        modalOpen: !modalOpen\n      });\n    };\n\n    this.toggleEditModal = () => {\n      const {\n        editModalOpen\n      } = this.state;\n      this.setState({\n        editModalOpen: !editModalOpen\n      });\n    };\n\n    this.handleEditFood = food => {\n      this.setState({\n        editingFood: food,\n        editModalOpen: true\n      });\n    };\n\n    this.state = {\n      foods: [],\n      editingFood: {},\n      modalOpen: false,\n      editModalOpen: false\n    };\n  }\n\n  async componentDidMount() {\n    const response = await api.get('/foods');\n    this.setState({\n      foods: response.data\n    });\n  }\n\n  render() {\n    const {\n      modalOpen,\n      editModalOpen,\n      editingFood,\n      foods\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        openModal: this.toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalAddFood, {\n        isOpen: modalOpen,\n        setIsOpen: this.toggleModal,\n        handleAddFood: this.handleAddFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditFood, {\n        isOpen: editModalOpen,\n        setIsOpen: this.toggleEditModal,\n        editingFood: editingFood,\n        handleUpdateFood: this.handleUpdateFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FoodsContainer, {\n        \"data-testid\": \"foods-list\",\n        children: foods && foods.map(food => /*#__PURE__*/_jsxDEV(Food, {\n          food: food,\n          handleDelete: this.handleDeleteFood,\n          handleEditFood: this.handleEditFood\n        }, food.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\n;\nexport default Dashboard;","map":{"version":3,"sources":["/home/marina/ignite/Challenge02_Chapter02/src/pages/Dashboard/index.jsx"],"names":["Component","Header","api","Food","ModalAddFood","ModalEditFood","FoodsContainer","Dashboard","constructor","props","handleAddFood","food","foods","state","response","post","available","setState","data","err","console","log","handleUpdateFood","editingFood","foodUpdated","put","id","foodsUpdated","map","f","handleDeleteFood","delete","foodsFiltered","filter","toggleModal","modalOpen","toggleEditModal","editModalOpen","handleEditFood","componentDidMount","get","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,cAAT,QAA+B,UAA/B;;;;AAEA,MAAMC,SAAN,SAAwBP,SAAxB,CAAkC;AAChCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,aAhBmB,GAgBH,MAAMC,IAAN,IAAc;AAC5B,YAAM;AAAEC,QAAAA;AAAF,UAAY,KAAKC,KAAvB;;AAEA,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMZ,GAAG,CAACa,IAAJ,CAAS,QAAT,EAAmB,EACxC,GAAGJ,IADqC;AAExCK,UAAAA,SAAS,EAAE;AAF6B,SAAnB,CAAvB;AAKA,aAAKC,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,EAAWE,QAAQ,CAACI,IAApB;AAAT,SAAd;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KA7BkB;;AAAA,SA+BnBG,gBA/BmB,GA+BA,MAAMX,IAAN,IAAc;AAC/B,YAAM;AAAEC,QAAAA,KAAF;AAASW,QAAAA;AAAT,UAAyB,KAAKV,KAApC;;AAEA,UAAI;AACF,cAAMW,WAAW,GAAG,MAAMtB,GAAG,CAACuB,GAAJ,CACvB,UAASF,WAAW,CAACG,EAAG,EADD,EAExB,EAAE,GAAGH,WAAL;AAAkB,aAAGZ;AAArB,SAFwB,CAA1B;AAKA,cAAMgB,YAAY,GAAGf,KAAK,CAACgB,GAAN,CAAUC,CAAC,IAC9BA,CAAC,CAACH,EAAF,KAASF,WAAW,CAACN,IAAZ,CAAiBQ,EAA1B,GAA+BG,CAA/B,GAAmCL,WAAW,CAACN,IAD5B,CAArB;AAIA,aAAKD,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAEe;AAAT,SAAd;AACD,OAXD,CAWE,OAAOR,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAhDkB;;AAAA,SAkDnBW,gBAlDmB,GAkDA,MAAMJ,EAAN,IAAY;AAC7B,YAAM;AAAEd,QAAAA;AAAF,UAAY,KAAKC,KAAvB;AAEA,YAAMX,GAAG,CAAC6B,MAAJ,CAAY,UAASL,EAAG,EAAxB,CAAN;AAEA,YAAMM,aAAa,GAAGpB,KAAK,CAACqB,MAAN,CAAatB,IAAI,IAAIA,IAAI,CAACe,EAAL,KAAYA,EAAjC,CAAtB;AAEA,WAAKT,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAEoB;AAAT,OAAd;AACD,KA1DkB;;AAAA,SA4DnBE,WA5DmB,GA4DL,MAAM;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKtB,KAA3B;AAEA,WAAKI,QAAL,CAAc;AAAEkB,QAAAA,SAAS,EAAE,CAACA;AAAd,OAAd;AACD,KAhEkB;;AAAA,SAkEnBC,eAlEmB,GAkED,MAAM;AACtB,YAAM;AAAEC,QAAAA;AAAF,UAAoB,KAAKxB,KAA/B;AAEA,WAAKI,QAAL,CAAc;AAAEoB,QAAAA,aAAa,EAAE,CAACA;AAAlB,OAAd;AACD,KAtEkB;;AAAA,SAwEnBC,cAxEmB,GAwEF3B,IAAI,IAAI;AACvB,WAAKM,QAAL,CAAc;AAAEM,QAAAA,WAAW,EAAEZ,IAAf;AAAqB0B,QAAAA,aAAa,EAAE;AAApC,OAAd;AACD,KA1EkB;;AAEjB,SAAKxB,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE,EADI;AAEXW,MAAAA,WAAW,EAAE,EAFF;AAGXY,MAAAA,SAAS,EAAE,KAHA;AAIXE,MAAAA,aAAa,EAAE;AAJJ,KAAb;AAMD;;AAEsB,QAAjBE,iBAAiB,GAAG;AACxB,UAAMzB,QAAQ,GAAG,MAAMZ,GAAG,CAACsC,GAAJ,CAAQ,QAAR,CAAvB;AAEA,SAAKvB,QAAL,CAAc;AAAEL,MAAAA,KAAK,EAAEE,QAAQ,CAACI;AAAlB,KAAd;AACD;;AA8DDuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA,SAAF;AAAaE,MAAAA,aAAb;AAA4Bd,MAAAA,WAA5B;AAAyCX,MAAAA;AAAzC,QAAmD,KAAKC,KAA9D;AAEA,wBACE;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,KAAKqB;AAAxB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AACE,QAAA,MAAM,EAAEC,SADV;AAEE,QAAA,SAAS,EAAE,KAAKD,WAFlB;AAGE,QAAA,aAAa,EAAE,KAAKxB;AAHtB;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE,QAAC,aAAD;AACE,QAAA,MAAM,EAAE2B,aADV;AAEE,QAAA,SAAS,EAAE,KAAKD,eAFlB;AAGE,QAAA,WAAW,EAAEb,WAHf;AAIE,QAAA,gBAAgB,EAAE,KAAKD;AAJzB;AAAA;AAAA;AAAA;AAAA,cAPF,eAcE,QAAC,cAAD;AAAgB,uBAAY,YAA5B;AAAA,kBACGV,KAAK,IACJA,KAAK,CAACgB,GAAN,CAAUjB,IAAI,iBACZ,QAAC,IAAD;AAEE,UAAA,IAAI,EAAEA,IAFR;AAGE,UAAA,YAAY,EAAE,KAAKmB,gBAHrB;AAIE,UAAA,cAAc,EAAE,KAAKQ;AAJvB,WACO3B,IAAI,CAACe,EADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA,oBADF;AA4BD;;AA5G+B;;AA6GjC;AAED,eAAenB,SAAf","sourcesContent":["import { Component } from 'react';\n\nimport Header from '../../components/Header';\nimport api from '../../services/api';\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\nimport { FoodsContainer } from './styles';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      foods: [],\n      editingFood: {},\n      modalOpen: false,\n      editModalOpen: false,\n    }\n  }\n\n  async componentDidMount() {\n    const response = await api.get('/foods');\n\n    this.setState({ foods: response.data });\n  }\n\n  handleAddFood = async food => {\n    const { foods } = this.state;\n\n    try {\n      const response = await api.post('/foods', {\n        ...food,\n        available: true,\n      });\n\n      this.setState({ foods: [...foods, response.data] });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  handleUpdateFood = async food => {\n    const { foods, editingFood } = this.state;\n\n    try {\n      const foodUpdated = await api.put(\n        `/foods/${editingFood.id}`,\n        { ...editingFood, ...food },\n      );\n\n      const foodsUpdated = foods.map(f =>\n        f.id !== foodUpdated.data.id ? f : foodUpdated.data,\n      );\n\n      this.setState({ foods: foodsUpdated });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  handleDeleteFood = async id => {\n    const { foods } = this.state;\n\n    await api.delete(`/foods/${id}`);\n\n    const foodsFiltered = foods.filter(food => food.id !== id);\n\n    this.setState({ foods: foodsFiltered });\n  }\n\n  toggleModal = () => {\n    const { modalOpen } = this.state;\n\n    this.setState({ modalOpen: !modalOpen });\n  }\n\n  toggleEditModal = () => {\n    const { editModalOpen } = this.state;\n\n    this.setState({ editModalOpen: !editModalOpen });\n  }\n\n  handleEditFood = food => {\n    this.setState({ editingFood: food, editModalOpen: true });\n  }\n\n  render() {\n    const { modalOpen, editModalOpen, editingFood, foods } = this.state;\n\n    return (\n      <>\n        <Header openModal={this.toggleModal} />\n        <ModalAddFood\n          isOpen={modalOpen}\n          setIsOpen={this.toggleModal}\n          handleAddFood={this.handleAddFood}\n        />\n        <ModalEditFood\n          isOpen={editModalOpen}\n          setIsOpen={this.toggleEditModal}\n          editingFood={editingFood}\n          handleUpdateFood={this.handleUpdateFood}\n        />\n\n        <FoodsContainer data-testid=\"foods-list\">\n          {foods &&\n            foods.map(food => (\n              <Food\n                key={food.id}\n                food={food}\n                handleDelete={this.handleDeleteFood}\n                handleEditFood={this.handleEditFood}\n              />\n            ))}\n        </FoodsContainer>\n      </>\n    );\n  }\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}